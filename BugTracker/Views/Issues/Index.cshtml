@model IEnumerable<BugTracker.Models.Issue>
@{
    ViewData["Title"] = "Issues";
}

<link rel="stylesheet" href="~/css/IssuesIndex.css" />
<link rel="stylesheet" href="~/lib/toastify-js/toastify.min.css" />

<h1>Issues</h1>


<a asp-action="Edit" class="btn-primary btn p-2">New Issue</a>

@*TABLE*@
<div class="container mt-5">
    <div class="">
        <input id="hide-closed" name="hide-closed" type="checkbox" class="form-checkbox" />
        <label for="hide-closed">Hide closed</label>
        <input id="hide-resolved" name="hide-resolved" type="checkbox" value="" class="form-checkbox" />
        <label for="hide-resolved">Hide resolved</label>
    </div>

    <table id="issuesTable" class="table table-sm table-responsive table-hover align-middle">
        <thead class="">
            <tr class="">
                <th style="width: 8.88%">@Html.DisplayNameFor(i => i.Id)</th>
                <th style="width: 15.88%">@Html.DisplayNameFor(i => i.Title)</th>
                <th style="width: 8.88%">@Html.DisplayNameFor(i => i.Status)</th>
                <th style="width: 8.88%">@Html.DisplayNameFor(i => i.Priority)</th>
                <th style="width: 8.88%">@Html.DisplayNameFor(i => i.Project)</th>
                <th style="width: 8.88%">@Html.DisplayNameFor(i => i.CreatedDate)</th>
                <th style="width: 8.88%">@Html.DisplayNameFor(i => i.UpdatedDate)</th>
                <th style="width: 8.88%">
                    @Html.DisplayNameFor(i => i.ResolvedDate)
                </th>
                <th class="text-center" data-class-name="Actions" id="actions" style="width: 8.88%">
                    Actions
                </th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>



@*MODAL*@
@Html.Partial("_prioritizeModal")


@section scripts{
<script src="~/lib/toastify-js/toastify.min.js"></script>
<script>
    $(document).ready(function () {

        // VARIABLES
        let hideResolved = $("#hide-resolved");
        let hideClosed = $("#hide-closed");

        // welcome
            Toastify({
                text: "Welcome!",
                duration: 1500,
                style: {
                    background: "linear-gradient(to right, #00B09B, #96C96D)",
                    cursor: "default",
                },
                position: "center",
                stopOnFocus: false,
                onClick: null,
            }).showToast();

        // data table
            $("#issuesTable").DataTable({
                ajax: {
                    url: "/api/issues",
                    dataSrc: "", // object that contains the data, empty if not nested
                },
                columns: [
                    {
                        data: "id",
                        render: function (data, type, issue) {
                                return type === "display" || type === "filter" ?
                                "<a href='/issues/details/" + issue.id +"' >BT-" +data +"</a>" :
                                data;
                        },

                    },
                    {
                        data: "title",
                        render: function (data, type, issue) {
                            return (
                                "<a href='/issues/details/" + issue.id + "' >" + data + "</a>"
                            );
                        },
                    },
                    {
                        data: "status.name",

                    },
                    {
                        data: "priority.name",
                    },
                    {
                        data: "project.name",
                    },
                    {
                        data: "createdDate",
                        render: (data) => {
                            let date = new Date(data);
                            return date.toLocaleString();
                        },
                    },
                    {
                        data: "updatedDate",
                        render: (data) => {
                            if (data == null) return "Not worked.";

                            let date = new Date(data);
                            return date.toLocaleString();
                        },
                    },
                    {
                        data: "resolvedDate",
                    },
                    {
                        data: "id",
                        render: function (data, type, issue) {
                            let canPrioritizeIssues = `@User.IsInRole("CanPrioritizeIssues").ToString()` === "True";
                            let canCloseIssues = `@User.IsInRole("CanCloseIssues").ToString()` === "True";
                            let canEditIssues = `@User.IsInRole("CanPrioritizeIssues")` === "True";

                            let render = "";

                            //if (!(canPrioritizeIssues || canCloseIssues || canEditIssues))
                            //    render +=  `<div class="">
                            //                    <button data-issue-id="` + issue.id +`" class="btn btn-danger js-request-access btn-sm">Request Access</button>
                            //                </div>`

                            if(canCloseIssues || canEditIssues)
                                render += '<div class="d-flex gap-2 w-100">'

                            if (canEditIssues){
                                render += `<a href="issues/edit/` +issue.id +`" class=" btn  btn-sm btn-secondary">Edit</a>`
                            }
                            if (canCloseIssues){
                                render += `<button data-issue-id="` + issue.id +`" class="btn btn-sm btn-danger js-close">Close</button>`
                            }
                            if(canCloseIssues || canEditIssues)
                                render += `</div>`
                            if (canPrioritizeIssues){
                                render += `<div class="d-block mt-2  ">
                                                <button  issueId=` + issue.id +` type="button" class="btn btn-sm btn-danger btn-rounded w-100 js-prioritize"  data-bs-toggle="modal" data-bs-target="#prioritizeFormModal">
                                                    Prioritize
                                                </button>
                                            </div>`
                            }

                            return render;
                        },
                    },
                ],
                createdRow: function (row, data, dataIndex) {
                    $(row).find(":eq(5)").addClass("priorityCell")
                    $(row).find(":eq(4)").addClass("statusCell")
                    $(row).find(":eq(5)").attr("issueId", data.id)
                },
                initComplete: function (){
                    let actionHeader = $("#actions")
                    let actionColumn = $("tbody td:nth-child(7)")
                    let actionNumber = $("tbody")
                                            .children("tr")
                                            .filter(function(i, elem) {
                                                 return $(elem).children().last().is(":empty")})
                                            .length


                    if (actionNumber > 0){
                        actionColumn.toggle()
                        actionHeader.toggle()
                    }

                    if(hideResolved.is(":checked"))
                        hideRow("statusCell","Resolved")

                    if(hideClosed.is(":checked"))
                        hideRow("statusCell","Closed")
                }
            });


        // FILTERS
            // get initial stated for traversing back to the page with previous options selected.



            //RESOLVED
            hideResolved.on("click", () =>{
                hideRow("statusCell","Resolved")
            });
            //Closed
            hideClosed.on("click", () =>{
                hideRow("statusCell","Closed")
            });


        // MODALS
            var button;

            //Show
            $("#issuesTable").on("click", ".js-prioritize", function (event) {
                // get the button for future reference/
                button = $(event.target);
                //show the modal
                $("#prioritizeModal").modal("show");
            });


            // populate the title and selected priority of the modal
            $("#prioritizeModal").on("show.bs.modal", async function (event) {
                // get issue ID from button
                let issueId = button.attr("issueId");
                //get a reference to the modal in order to search elements.
                let modal = $(this);
                // call API for, get the issue
                let issue = await $.ajax({ url: "/api/issues/" + issueId });
                // Populate the modal
                modal.find(".modal-title").text("Prioritize issue BT-" + issue.id);
                modal.find(".issue-description").text(issue.title);
                // disable the current priority of the issue and enable the rest
                let buttons = modal.find(".form-check-input"); // get the buttons
                buttons.removeAttr("disabled"); // enable all
                buttons[issue.priorityId - 1].setAttribute("disabled", "disabled"); // disable the current priority for the id
                buttons.attr("issueId", issueId); //insert the user Id for ease of access when post

            });


            // ONSHOW
            // $("#prioritizeModal").on("show.bs.modal", function (event) { });

            // send button
            $(".js-prioritize").on("click", function () {
                // get the variables from the form.
                let selectedOption = $(".form-check-input").filter(":checked");
                let issueId = selectedOption.attr("IssueId");
                let priorityId = parseInt(selectedOption.attr("value"));
                let priorityText = selectedOption.siblings().text();
                let description = $("#message-text").val().toString();

                $("#prioritizeModal").modal("hide");

                //post using ajax

                $.ajax({
                    url: '/api/issues/prioritize/' + issueId,
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    method: "POST",
                    dataType: "json",
                    data: JSON.stringify({
                        description: description,
                        priorityId: priorityId,
                    }),
                    success: () => {
                        // update the text of the cell
                        $(".priorityCell").filter((i, e) => e.getAttribute("issueId") === "20").text(priorityText)

                        Toastify({
                            text: "Success!",
                            duration: 1500,
                            style: {
                                background: "linear-gradient(to right, #00B09B, #96C96D)",
                                cursor: "default",
                            },
                            position: "center",
                            stopOnFocus: false,
                            onClick: null,
                        }).showToast();
                    },
                    error: () => {
                        Toastify({
                            text: "Something went wrong.",
                            duration: 1500,
                            style: {
                                background: "linear-gradient(to right, #EE4242, #990201)",
                                cursor: "default",
                            },
                            position: "center",
                            stopOnFocus: false,
                            onClick: null,
                        }).showToast();

                    }
                })
            });


        // CLOSE ISSUE
            $("#issuesTable").on("click", ".js-close", function () {
                let status = $(this).parent().parent().siblings().first().next().next();
                if (status.text() == "Closed") {
                    Toastify({
                        text: "This issue is already closed!",
                        duration: 3000,
                        offset: {
                            x: 150,
                            y: 150,
                        },
                        style: {
                            background: "linear-gradient(to right, #EE4242, #990201)",
                            fontSize: "20px",
                            position: "center",
                        },
                    }).showToast();
                }
                else if (confirm("Are you sure you want to close this issue?")) {
                    status.text("Closed");
                    $.ajax({
                        url: "api/issues/" + $(this).attr("data-issue-id"),
                        method: "DELETE",
                        success: () => {
                        },
                        error: () => { },
                    });
                }
            });

        // helpers
            function hideRow(childrenClass, filter){

                $("tbody tr").each(function () {
                   if ($(this).children("."+childrenClass).filter((i, elem) => elem.innerText === filter).length > 0){
                       $(this).toggle();
                   }
                })
            }
    });
</script>
}
